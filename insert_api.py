#!/usr/bin/env python3
"""
SSHade API Key Insertion Tool
Quick command-line interface for inserting API keys and attack server settings
"""

import os
import sys
import argparse
from pathlib import Path
from colorama import init, Fore, Style

# Initialize colorama
init(autoreset=True)

class APIKeyInserter:
    def __init__(self):
        self.env_file = ".env"
        
    def print_status(self, message: str, status_type: str = "info"):
        """Print colored status messages"""
        icons = {
            "info": "ℹ️",
            "success": "✔️",
            "warning": "⚠️",
            "error": "✖️"
        }
        colors = {
            "info": Fore.BLUE,
            "success": Fore.GREEN,
            "warning": Fore.YELLOW,
            "error": Fore.RED
        }
        icon = icons.get(status_type, "")
        color = colors.get(status_type, Fore.WHITE)
        print(f"{color}{icon} {message}{Style.RESET_ALL}")

    def load_env_file(self):
        """Load existing .env file"""
        env_vars = {}
        if os.path.exists(self.env_file):
            try:
                with open(self.env_file, 'r') as f:
                    for line in f:
                        line = line.strip()
                        if line and not line.startswith('#') and '=' in line:
                            key, value = line.split('=', 1)
                            env_vars[key] = value
                self.print_status("Loaded existing .env file", "success")
            except Exception as e:
                self.print_status(f"Error loading .env file: {e}", "error")
        return env_vars

    def write_env_file(self, env_vars):
        """Write environment variables to .env file"""
        try:
            with open(self.env_file, 'w') as f:
                f.write("# SSHade Environment Configuration\n")
                f.write("# Generated by insert_api.py\n\n")
                
                for key, value in env_vars.items():
                    f.write(f"{key}={value}\n")
            
            self.print_status(f"Configuration saved to {self.env_file}", "success")
            return True
        except Exception as e:
            self.print_status(f"Error writing .env file: {e}", "error")
            return False

    def insert_api_key(self, api_type: str, api_key: str):
        """Insert a specific API key"""
        env_vars = self.load_env_file()
        
        # Map API types to environment variable names
        api_mapping = {
            'shodan': 'SHODAN_API_KEY',
            'virustotal': 'VIRUSTOTAL_API_KEY',
            'censys': 'CENSYS_API_KEY',
            'censys_secret': 'CENSYS_SECRET'
        }
        
        if api_type not in api_mapping:
            self.print_status(f"Unknown API type: {api_type}", "error")
            return False
        
        env_var_name = api_mapping[api_type]
        env_vars[env_var_name] = api_key
        
        if self.write_env_file(env_vars):
            self.print_status(f"{api_type.upper()} API key inserted successfully", "success")
            return True
        return False

    def insert_attack_server(self, host: str, port: str = "22", username: str = "", password: str = ""):
        """Insert attack server configuration"""
        env_vars = self.load_env_file()
        
        if host:
            env_vars['ATTACK_SERVER_HOST'] = host
        if port:
            env_vars['ATTACK_SERVER_PORT'] = port
        if username:
            env_vars['DEFAULT_USERNAME'] = username
        if password:
            env_vars['DEFAULT_PASSWORD'] = password
        
        if self.write_env_file(env_vars):
            self.print_status("Attack server configuration inserted successfully", "success")
            return True
        return False

    def insert_proxy(self, proxy_type: str, proxy_url: str):
        """Insert proxy configuration"""
        env_vars = self.load_env_file()
        
        # Map proxy types to environment variable names
        proxy_mapping = {
            'http': 'HTTP_PROXY',
            'https': 'HTTPS_PROXY',
            'socks5': 'SOCKS5_PROXY'
        }
        
        if proxy_type not in proxy_mapping:
            self.print_status(f"Unknown proxy type: {proxy_type}", "error")
            return False
        
        env_var_name = proxy_mapping[proxy_type]
        env_vars[env_var_name] = proxy_url
        
        if self.write_env_file(env_vars):
            self.print_status(f"{proxy_type.upper()} proxy inserted successfully", "success")
            return True
        return False

    def insert_ssh_keys(self, private_key: str = "", public_key: str = ""):
        """Insert SSH key paths"""
        env_vars = self.load_env_file()
        
        if private_key:
            env_vars['SSH_PRIVATE_KEY_PATH'] = private_key
        if public_key:
            env_vars['SSH_PUBLIC_KEY_PATH'] = public_key
        
        if self.write_env_file(env_vars):
            self.print_status("SSH key paths inserted successfully", "success")
            return True
        return False

    def show_current_config(self):
        """Show current configuration"""
        env_vars = self.load_env_file()
        
        if not env_vars:
            self.print_status("No configuration found", "warning")
            return
        
        print(f"\n{Fore.CYAN}📋 Current Configuration{Style.RESET_ALL}")
        print("=" * 50)
        
        for key, value in env_vars.items():
            # Mask sensitive values
            if 'KEY' in key or 'SECRET' in key or 'PASSWORD' in key:
                masked_value = value[:4] + '*' * (len(value) - 8) + value[-4:] if len(value) > 8 else '***'
                print(f"{Fore.YELLOW}{key}{Style.RESET_ALL}: {masked_value}")
            else:
                print(f"{Fore.YELLOW}{key}{Style.RESET_ALL}: {value}")

def main():
    """Main function"""
    parser = argparse.ArgumentParser(
        description="SSHade API Key Insertion Tool",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Insert Shodan API key
  python3 insert_api.py --api shodan --key YOUR_SHODAN_API_KEY

  # Insert VirusTotal API key
  python3 insert_api.py --api virustotal --key YOUR_VIRUSTOTAL_API_KEY

  # Insert attack server configuration
  python3 insert_api.py --server 192.168.1.100 --port 22 --user admin --pass password123

  # Insert proxy configuration
  python3 insert_api.py --proxy http --url http://proxy:8080

  # Insert SSH key paths
  python3 insert_api.py --ssh-private /path/to/private.key --ssh-public /path/to/public.key

  # Show current configuration
  python3 insert_api.py --show
        """
    )
    
    # API key options
    parser.add_argument('--api', choices=['shodan', 'virustotal', 'censys', 'censys_secret'],
                       help='API type to insert')
    parser.add_argument('--key', help='API key value')
    
    # Attack server options
    parser.add_argument('--server', help='Attack server host')
    parser.add_argument('--port', default='22', help='Attack server port (default: 22)')
    parser.add_argument('--user', help='Default username')
    parser.add_argument('--pass', dest='password', help='Default password')
    
    # Proxy options
    parser.add_argument('--proxy', choices=['http', 'https', 'socks5'],
                       help='Proxy type to insert')
    parser.add_argument('--url', help='Proxy URL')
    
    # SSH key options
    parser.add_argument('--ssh-private', help='SSH private key path')
    parser.add_argument('--ssh-public', help='SSH public key path')
    
    # Show configuration
    parser.add_argument('--show', action='store_true', help='Show current configuration')
    
    args = parser.parse_args()
    
    inserter = APIKeyInserter()
    
    try:
        if args.show:
            inserter.show_current_config()
        elif args.api and args.key:
            inserter.insert_api_key(args.api, args.key)
        elif args.server:
            inserter.insert_attack_server(args.server, args.port, args.user, args.password)
        elif args.proxy and args.url:
            inserter.insert_proxy(args.proxy, args.url)
        elif args.ssh_private or args.ssh_public:
            inserter.insert_ssh_keys(args.ssh_private, args.ssh_public)
        else:
            parser.print_help()
            
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}Operation cancelled by user{Style.RESET_ALL}")
        sys.exit(0)
    except Exception as e:
        print(f"\n{Fore.RED}Operation failed: {e}{Style.RESET_ALL}")
        sys.exit(1)

if __name__ == "__main__":
    main() 