#!/usr/bin/env python3
"""
Vulnerability Scanner for SSHade
Scans targets for known vulnerabilities and provides exploit execution.
"""

import os
import sys
import argparse
from typing import Dict, List, Optional

# Add project root to path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

from attacks.ssh_fingerprint import SSHFingerprint

class VulnerabilityScanner:
    """Scanner for SSH vulnerabilities with exploit integration"""
    
    def __init__(self):
        self.available_exploits = self.get_available_exploits()
    
    def get_available_exploits(self) -> Dict[str, Dict]:
        """Get all available exploit modules"""
        exploits = {}
        exploits_dir = os.path.dirname(os.path.abspath(__file__))
        
        for item in os.listdir(exploits_dir):
            item_path = os.path.join(exploits_dir, item)
            if os.path.isdir(item_path) and item.startswith('CVE-'):
                exploit_file = os.path.join(item_path, 'exploit.py')
                if os.path.exists(exploit_file):
                    cve_id = item
                    exploits[cve_id] = {
                        'path': exploit_file,
                        'name': item,
                        'description': f'Exploit for {cve_id}'
                    }
        
        return exploits
    
    def scan_target(self, target: str, port: int = 22) -> Dict:
        """Scan a target for vulnerabilities"""
        print(f"üîç Scanning {target}:{port} for vulnerabilities...")
        
        try:
            fingerprint = SSHFingerprint(target, port)
            banner = fingerprint.grab_banner()
            
            if not banner:
                print(f"‚ùå Could not connect to {target}:{port}")
                return {
                    'target': target,
                    'port': port,
                    'banner': None,
                    'vulnerabilities': [],
                    'status': 'connection_failed'
                }
            
            print(f"üì° SSH Banner: {banner}")
            
            # Parse banner and check vulnerabilities
            parsed = fingerprint.parse_banner(banner)
            vulnerabilities = fingerprint.check_vulnerabilities(parsed['software'], parsed['version'])
            
            result = {
                'target': target,
                'port': port,
                'banner': banner,
                'parsed': parsed,
                'vulnerabilities': vulnerabilities,
                'vulnerability_count': len(vulnerabilities),
                'status': 'success'
            }
            
            # Display results
            print(f"\nüìä Scan Results:")
            print(f"   Software: {parsed['software']}")
            print(f"   Version: {parsed['version']}")
            if parsed['os']:
                print(f"   OS: {parsed['os']}")
            
            if vulnerabilities:
                print(f"\n‚ö†Ô∏è  Found {len(vulnerabilities)} vulnerability(ies):")
                for i, vuln in enumerate(vulnerabilities, 1):
                    print(f"\n{i}. {vuln['cve_id']} ‚Äî {vuln['title']}")
                    print(f"   Severity: {vuln['severity']}")
                    print(f"   Description: {vuln['description']}")
                    
                    if vuln.get('exploit_available', False):
                        print(f"   üí• Exploit Available: {vuln['exploit_path']}")
            else:
                print(f"\n‚úÖ No known vulnerabilities detected")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Error scanning target: {e}")
            return {
                'target': target,
                'port': port,
                'banner': None,
                'vulnerabilities': [],
                'status': 'error',
                'error': str(e)
            }
    
    def run_exploit(self, cve_id: str, target: str, port: int = 22, **kwargs) -> bool:
        """Run a specific exploit"""
        if cve_id not in self.available_exploits:
            print(f"‚ùå Exploit not found: {cve_id}")
            return False
        
        print(f"üöÄ Running exploit: {cve_id}")
        print(f"üéØ Target: {target}:{port}")
        
        try:
            # Import and run the exploit
            exploit_dir = os.path.join(os.path.dirname(__file__), cve_id)
            sys.path.insert(0, exploit_dir)
            
            if cve_id == 'CVE-2018-15473':
                from exploit import CVE201815473Exploit
                exploit_instance = CVE201815473Exploit(target, port)
            elif cve_id == 'CVE-2016-6210':
                from exploit import CVE20166210Exploit
                exploit_instance = CVE20166210Exploit(target, port)
            else:
                print(f"‚ùå Unknown exploit: {cve_id}")
                return False
            
            exploit_instance.run(**kwargs)
            return True
            
        except Exception as e:
            print(f"‚ùå Error running exploit: {e}")
            return False
    
    def list_exploits(self):
        """List all available exploits"""
        print("üìã Available Exploits:")
        print("=" * 50)
        
        for cve_id, exploit_info in self.available_exploits.items():
            print(f"üîß {cve_id}")
            print(f"   Path: {exploit_info['path']}")
            print(f"   Description: {exploit_info['description']}")
            print()

def main():
    """Main function for command-line usage"""
    parser = argparse.ArgumentParser(description="SSHade Vulnerability Scanner")
    parser.add_argument("-t", "--target", help="Target IP address")
    parser.add_argument("-p", "--port", type=int, default=22, help="SSH port (default: 22)")
    parser.add_argument("--scan", action="store_true", help="Scan target for vulnerabilities")
    parser.add_argument("--exploit", help="Run specific exploit (CVE ID)")
    parser.add_argument("--list", action="store_true", help="List available exploits")
    parser.add_argument("-u", "--userlist", help="Username list for exploits")
    parser.add_argument("-o", "--output", help="Output file for exploit results")
    
    args = parser.parse_args()
    
    scanner = VulnerabilityScanner()
    
    if args.list:
        scanner.list_exploits()
        return
    
    if args.scan and args.target:
        result = scanner.scan_target(args.target, args.port)
        
        # Prompt for exploit if vulnerabilities found
        if result['vulnerabilities']:
            print(f"\nüí• Vulnerabilities detected! Run exploit? [Y/n]: ", end="")
            try:
                response = input().strip().lower()
                if response in ['', 'y', 'yes']:
                    # Run the first available exploit
                    for vuln in result['vulnerabilities']:
                        if vuln.get('exploit_available', False):
                            cve_id = vuln['cve_id']
                            scanner.run_exploit(cve_id, args.target, args.port, 
                                              userlist_file=args.userlist, 
                                              output_file=args.output)
                            break
            except KeyboardInterrupt:
                print("\n[!] Exploit execution cancelled.")
    
    elif args.exploit and args.target:
        scanner.run_exploit(args.exploit, args.target, args.port,
                           userlist_file=args.userlist,
                           output_file=args.output)
    
    else:
        parser.print_help()

if __name__ == "__main__":
    main() 