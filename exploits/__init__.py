#!/usr/bin/env python3
"""
Exploits package for SSHade.
Contains vulnerability exploit modules and scanning functionality.
"""

import os
import sys
from typing import Dict, List, Optional

# Add exploits directory to Python path
exploits_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, exploits_dir)

def get_available_exploits() -> Dict[str, Dict]:
    """Get all available exploit modules"""
    exploits = {}
    
    # Scan exploits directory for CVE modules
    for item in os.listdir(exploits_dir):
        item_path = os.path.join(exploits_dir, item)
        if os.path.isdir(item_path) and item.startswith('CVE-'):
            exploit_file = os.path.join(item_path, 'exploit.py')
            if os.path.exists(exploit_file):
                cve_id = item
                exploits[cve_id] = {
                    'path': exploit_file,
                    'name': item,
                    'description': f'Exploit for {cve_id}'
                }
    
    return exploits

def run_exploit(cve_id: str, target: str, port: int = 22, **kwargs) -> bool:
    """Run a specific exploit by CVE ID"""
    try:
        # Import the exploit module
        exploit_dir = os.path.join(exploits_dir, cve_id)
        sys.path.insert(0, exploit_dir)
        
        from exploit import CVE201815473Exploit, CVE20166210Exploit
        
        # Map CVE ID to exploit class
        exploit_classes = {
            'CVE-2018-15473': CVE201815473Exploit,
            'CVE-2016-6210': CVE20166210Exploit
        }
        
        if cve_id in exploit_classes:
            exploit_class = exploit_classes[cve_id]
            exploit_instance = exploit_class(target, port)
            exploit_instance.run(**kwargs)
            return True
        else:
            print(f"Exploit not found for {cve_id}")
            return False
            
    except Exception as e:
        print(f"Error running exploit {cve_id}: {e}")
        return False

def scan_vulnerabilities(target: str, port: int = 22) -> List[Dict]:
    """Scan target for known vulnerabilities"""
    try:
        from attacks.ssh_fingerprint import SSHFingerprint
        
        fingerprint = SSHFingerprint(target, port)
        banner = fingerprint.grab_banner()
        
        if not banner:
            return []
        
        # Parse banner and check vulnerabilities
        parsed = fingerprint.parse_banner(banner)
        vulnerabilities = fingerprint.check_vulnerabilities(parsed['software'], parsed['version'])
        
        return vulnerabilities
        
    except Exception as e:
        print(f"Error scanning vulnerabilities: {e}")
        return []

__all__ = [
    'get_available_exploits',
    'run_exploit', 
    'scan_vulnerabilities'
] 